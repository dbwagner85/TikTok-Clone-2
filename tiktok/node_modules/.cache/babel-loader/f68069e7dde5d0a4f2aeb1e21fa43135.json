{"ast":null,"code":"import React from 'react';\nimport { bool, func, node, number, object, oneOfType, string } from 'prop-types';\n\nvar debounce = function debounce(fn, time) {\n  var timeout = void 0;\n  return function () {\n    var _this = this,\n        _arguments = arguments;\n\n    var functionCall = function functionCall() {\n      return fn.apply(_this, _arguments);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n}; // https://stackoverflow.com/questions/6860853/generate-random-string-for-div-id#6860916\n\n\nvar guidGenerator = function guidGenerator() {\n  var S4 = function S4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  };\n\n  return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();\n};\n\nfunction getHighest(elements) {\n  var highest = 0;\n  elements.forEach(function (el) {\n    if (el.rect && el.rect.height > highest) {\n      highest = el.rect.height;\n    }\n  });\n  return highest;\n}\n\nfunction nextTriggerOnMount(_ref) {\n  var rect = _ref.rect,\n      mode = _ref.mode,\n      prevOffset = _ref.prevOffset,\n      position = _ref.position,\n      direction = _ref.direction,\n      width = _ref.width;\n  if (mode !== 'chain') return false;\n\n  switch (direction) {\n    case 'toRight':\n      return position.from > 0;\n\n    case 'toLeft':\n    default:\n      return rect.width + position.from <= width;\n  }\n}\n\nfunction getFromOffset(_ref) {\n  var rect = _ref.rect,\n      offset = _ref.offset,\n      direction = _ref.direction;\n\n  switch (direction) {\n    case 'toRight':\n      return offset - rect.width;\n\n    case 'toLeft':\n    default:\n      return offset;\n  }\n}\n\nfunction getFrom(_ref2) {\n  var index = _ref2.index,\n      rect = _ref2.rect,\n      offset = _ref2.offset,\n      width = _ref2.width,\n      direction = _ref2.direction;\n  if (index === 0) return offset;\n\n  if (typeof offset === 'number') {\n    return getFromOffset({\n      rect: rect,\n      offset: offset,\n      direction: direction\n    });\n  }\n\n  switch (direction) {\n    case 'toRight':\n      return -rect.width;\n\n    case 'toLeft':\n    default:\n      return width;\n  }\n}\n\nfunction getTo(_ref3) {\n  var rect = _ref3.rect,\n      width = _ref3.width,\n      direction = _ref3.direction;\n\n  switch (direction) {\n    case 'toRight':\n      return width;\n\n    case 'toLeft':\n    default:\n      return -rect.width;\n  }\n}\n\nfunction getNext(_ref4) {\n  var mode = _ref4.mode,\n      from = _ref4.from,\n      direction = _ref4.direction,\n      rect = _ref4.rect,\n      width = _ref4.width;\n  var start = from || 0;\n\n  switch (mode) {\n    case 'await':\n      switch (direction) {\n        case 'toRight':\n          return width;\n\n        case 'toLeft':\n        default:\n          return -rect.width;\n      }\n\n    case 'smooth':\n      switch (direction) {\n        case 'toRight':\n          return rect.width > width ? 0 : width - rect.width;\n\n        case 'toLeft':\n        default:\n          return rect.width > width ? width - rect.width : 0;\n      }\n\n    case 'chain':\n    default:\n      switch (direction) {\n        case 'toRight':\n          return 0;\n\n        case 'toLeft':\n        default:\n          return rect.width + start > width ? width - rect.width : width - rect.left - rect.width;\n      }\n\n  }\n}\n\nvar getPosition = function getPosition(_ref5) {\n  var mode = _ref5.mode,\n      index = _ref5.index,\n      rect = _ref5.rect,\n      offset = _ref5.offset,\n      width = _ref5.width,\n      direction = _ref5.direction;\n  var from = getFrom({\n    index: index,\n    rect: rect,\n    offset: offset,\n    width: width,\n    direction: direction\n  });\n  var to = getTo({\n    rect: rect,\n    width: width,\n    direction: direction\n  });\n  return {\n    from: from,\n    to: to,\n    next: getNext({\n      mode: mode,\n      from: from,\n      direction: direction,\n      rect: rect,\n      width: width\n    })\n  };\n};\n\nfunction getNextOffset(_ref) {\n  var from = _ref.from,\n      rect = _ref.rect,\n      direction = _ref.direction;\n\n  switch (direction) {\n    case 'toRight':\n      {\n        return from;\n      }\n\n    case 'toLeft':\n    default:\n      {\n        return from + rect.width;\n      }\n  }\n}\n\nfunction getStartOffset(_ref) {\n  var offset = _ref.offset,\n      rect = _ref.rect,\n      direction = _ref.direction,\n      width = _ref.width;\n\n  if (offset === 'run-in') {\n    switch (direction) {\n      case 'toRight':\n        return -rect.width;\n\n      case 'toLeft':\n      default:\n        return width;\n    }\n  }\n\n  if (typeof offset === 'string') {\n    var offsetRelative = Number(offset.replace('%', ''));\n    if (offsetRelative) return width / 100 * offsetRelative;\n  }\n\n  return offset;\n}\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar toConsumableArray = function toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar TickerElement = function (_React$Component) {\n  inherits(TickerElement, _React$Component);\n\n  function TickerElement() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, TickerElement);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TickerElement.__proto__ || Object.getPrototypeOf(TickerElement)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      children: _this.props.children({\n        index: _this.props.index\n      }),\n      move: _this.props.move,\n      position: {\n        from: undefined,\n        to: undefined,\n        next: undefined\n      },\n      offset: _this.props.offset,\n      rect: null\n    }, _this.x = 0, _this.isMoving = false, _this.nextTriggered = false, _this.elementRef = React.createRef(), _this.raf = null, _this.componentDidMount = function () {\n      _this.setPosition(true);\n\n      _this.observer = new MutationObserver(_this.onMutation);\n\n      _this.observer.observe(_this.elementRef.current, {\n        characterData: true,\n        childList: true,\n        subtree: true\n      });\n    }, _this.componentWillUnmount = function () {\n      _this.observer.disconnect();\n    }, _this.onMutation = function () {\n      _this.setPosition();\n    }, _this.componentDidUpdate = function (prevProps, prevState) {\n      if (!_this.x && prevState.position.from !== _this.state.position.from) {\n        _this.x = _this.state.position.from;\n        _this.elementRef.current.style.transform = 'translate3d(' + _this.x + 'px, 0, 0)';\n      }\n\n      if (_this.x !== _this.state.position.from && prevProps.prevRect && _this.props.prevRect && prevProps.prevRect.width !== _this.props.prevRect.width) {\n        if (_this.props.offset) {\n          _this.x = _this.x + (_this.props.offset - prevProps.offset);\n        } else {\n          _this.x = _this.x + (_this.props.prevRect.width - prevProps.prevRect.width);\n        }\n\n        _this.elementRef.current.style.transform = 'translate3d(' + _this.x + 'px, 0, 0)';\n      }\n\n      if (_this.props.move && !prevProps.start && _this.props.start) {\n        _this.animate();\n      }\n\n      if (_this.props.start && !prevProps.move && _this.props.move) {\n        _this.animate();\n      }\n\n      if (prevProps.move && !_this.props.move) {\n        _this.isMoving = false;\n        window.cancelAnimationFrame(_this.raf);\n      }\n    }, _this.setPosition = function (isMount) {\n      var _this$props = _this.props,\n          mode = _this$props.mode,\n          width = _this$props.width,\n          id = _this$props.id,\n          onNext = _this$props.onNext,\n          direction = _this$props.direction,\n          index = _this$props.index,\n          setRect = _this$props.setRect;\n\n      var rect = _this.elementRef.current.getBoundingClientRect();\n\n      if (rect.width === 0) return;\n      var offset = _this.props.index === 0 ? getStartOffset({\n        offset: _this.props.offset,\n        rect: rect,\n        direction: direction,\n        width: width\n      }) : _this.props.offset;\n      var position = getPosition({\n        mode: mode,\n        rect: rect,\n        index: index,\n        offset: offset,\n        width: width,\n        direction: direction\n      });\n      setRect({\n        index: _this.props.index,\n        rect: rect,\n        offset: offset,\n        nextOffset: getNextOffset({\n          from: position.from,\n          rect: rect,\n          direction: direction\n        })\n      });\n\n      if (isMount) {\n        var nextTriggerOnMount$$1 = nextTriggerOnMount({\n          mode: mode,\n          rect: rect,\n          position: position,\n          offset: offset,\n          direction: direction,\n          width: width\n        });\n\n        if (nextTriggerOnMount$$1) {\n          onNext({\n            id: id,\n            index: index,\n            rect: rect,\n            nextOffset: getNextOffset({\n              from: position.from,\n              rect: rect,\n              direction: direction\n            })\n          });\n        }\n\n        if (!nextTriggerOnMount$$1 && (offset || index === 0)) {\n          onNext({\n            id: id,\n            index: index,\n            rect: rect\n          });\n        }\n\n        _this.nextTriggered = nextTriggerOnMount$$1;\n      }\n\n      _this.setState({\n        rect: rect,\n        offset: offset,\n        position: position\n      });\n    }, _this.shouldTriggerNext = function () {\n      if (_this.nextTriggered) return false;\n      return _this.props.direction === 'toLeft' ? _this.x <= _this.state.position.next : _this.x >= _this.state.position.next;\n    }, _this.triggerNext = function () {\n      if (_this.shouldTriggerNext()) {\n        // if (this.props.index === 5) console.log(this.x)\n        _this.nextTriggered = true;\n\n        _this.props.onNext({\n          id: _this.props.id,\n          index: _this.props.index,\n          rect: _this.state.rect\n        });\n      }\n    }, _this.shouldFinish = function () {\n      switch (_this.props.direction) {\n        case 'toRight':\n          return _this.x >= _this.state.position.to;\n\n        case 'toLeft':\n        default:\n          return _this.x <= _this.state.position.to;\n      }\n    }, _this.animate = function () {\n      if (_this.isMoving) return;\n      _this.isMoving = true;\n      var prevTimestamp = null;\n\n      var step = function step(timestamp) {\n        if (!_this.isMoving) return;\n        if (!_this.elementRef.current) return;\n        var progress = prevTimestamp ? timestamp - prevTimestamp : 0;\n        _this.x = _this.props.direction === 'toLeft' ? _this.x - progress / 100 * _this.props.speed : _this.x + progress / 100 * _this.props.speed;\n        _this.elementRef.current.style.transform = 'translate3d(' + _this.x + 'px, 0, 0)';\n\n        _this.triggerNext();\n\n        if (_this.shouldFinish()) {\n          _this.isMoving = false;\n          prevTimestamp = null;\n\n          _this.props.onFinish(_this.props.id);\n        } else {\n          prevTimestamp = timestamp;\n          _this.raf = window.requestAnimationFrame(step);\n        }\n      };\n\n      _this.raf = window.requestAnimationFrame(step);\n    }, _this.render = function () {\n      return React.createElement('div', {\n        className: 'ticker__element',\n        style: {\n          willChange: 'transform',\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          transform: 'translate3d(' + _this.x + 'px, 0, 0)'\n        },\n        ref: _this.elementRef\n      }, _this.state.children);\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  return TickerElement;\n}(React.Component);\n\nTickerElement.propTypes = {\n  children: oneOfType([node, func]).isRequired,\n  direction: string.isRequired,\n  speed: number.isRequired,\n  id: string.isRequired,\n  index: number.isRequired,\n  mode: string.isRequired,\n  move: bool.isRequired,\n  onNext: func.isRequired,\n  onFinish: func.isRequired,\n  setRect: func.isRequired,\n  start: bool.isRequired,\n  offset: oneOfType([number, string]),\n  prevRect: object,\n  width: number\n};\nTickerElement.defaultProps = {\n  offset: undefined,\n  width: undefined,\n  prevRect: null\n};\n\nvar getDefaultState = function getDefaultState(offset, width) {\n  return {\n    elements: [{\n      id: guidGenerator(),\n      index: 0,\n      height: 0,\n      start: false,\n      offset: offset,\n      rect: null,\n      prevRect: null\n    }],\n    width: width,\n    height: 0\n  };\n};\n\nvar Ticker = function (_React$Component) {\n  inherits(Ticker, _React$Component);\n\n  function Ticker() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Ticker);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Ticker.__proto__ || Object.getPrototypeOf(Ticker)).call.apply(_ref, [this].concat(args))), _this), _this.next = null, _this.state = getDefaultState(_this.props.offset), _this.tickerRef = React.createRef(), _this.dOnResize = debounce(function () {\n      return _this.onResize();\n    }, 150), _this.componentDidMount = function () {\n      _this.setState({\n        width: _this.tickerRef.current.offsetWidth,\n        height: _this.props.height\n      });\n\n      window.addEventListener('resize', _this.dOnResize);\n    }, _this.componentWillUnmount = function () {\n      window.removeEventListener('resize', _this.dOnResize);\n    }, _this.setRect = function (_ref2) {\n      var index = _ref2.index,\n          rect = _ref2.rect,\n          offset = _ref2.offset,\n          nextOffset = _ref2.nextOffset;\n\n      _this.setState(function (prevState) {\n        var elements = prevState.elements.map(function (el) {\n          var newEl = el;\n          if (el.index === index) newEl.rect = rect; // next element\n\n          if (el.index === index + 1) {\n            newEl.prevRect = rect;\n\n            if (newEl.offset) {\n              newEl.offset = nextOffset;\n            }\n          }\n\n          return newEl;\n        });\n        return {\n          elements: elements,\n          height: _this.props.height ? prevState.height : getHighest(elements)\n        };\n      });\n    }, _this.onResize = function () {\n      if (!_this.tickerRef.current || _this.tickerRef.current.offsetWidth === _this.state.width) return;\n\n      _this.setState(_extends({}, getDefaultState(_this.props.offset, _this.tickerRef.current.offsetWidth), {\n        height: _this.props.height\n      }));\n    }, _this.onFinish = function (id) {\n      _this.props.onFinish();\n\n      _this.setState(function (prevState) {\n        return {\n          elements: prevState.elements.filter(function (el) {\n            return el.id !== id;\n          })\n        };\n      });\n    }, _this.onNext = function (_ref3) {\n      var id = _ref3.id,\n          index = _ref3.index,\n          rect = _ref3.rect,\n          nextOffset = _ref3.nextOffset;\n\n      _this.props.onNext(index);\n\n      _this.setState(function (prevState) {\n        return {\n          elements: [].concat(toConsumableArray(prevState.elements.map(function (el) {\n            var newEl = el;\n            if (el.index === index) newEl.rect = rect;\n\n            if (el.index === 0 || el.offset || newEl.index === index + 1) {\n              newEl.start = true;\n            }\n\n            return newEl; // create new element\n          })), [{\n            id: guidGenerator(),\n            index: prevState.elements[prevState.elements.length - 1].index + 1,\n            height: 0,\n            start: false,\n            offset: nextOffset,\n            rect: null,\n            prevRect: rect\n          }])\n        };\n      });\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(Ticker, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement('div', {\n        className: 'ticker',\n        ref: this.tickerRef,\n        style: {\n          position: 'relative',\n          overflow: 'hidden',\n          height: this.state.height && this.state.height + 'px'\n        }\n      }, this.state.width && this.state.elements.map(function (el) {\n        return React.createElement(TickerElement, {\n          key: el.id,\n          id: el.id,\n          index: el.index,\n          start: el.start,\n          offset: el.offset,\n          prevRect: el.prevRect,\n          direction: _this2.props.direction,\n          mode: _this2.props.mode,\n          move: _this2.props.move,\n          speed: _this2.props.speed,\n          onFinish: _this2.onFinish,\n          onNext: _this2.onNext,\n          setRect: _this2.setRect,\n          width: _this2.state.width\n        }, _this2.props.children);\n      }));\n    }\n  }]);\n  return Ticker;\n}(React.Component);\n\nTicker.propTypes = {\n  children: oneOfType([node, func]).isRequired,\n  direction: string,\n  mode: string,\n  move: bool,\n  offset: oneOfType([number, string]),\n  speed: number,\n  height: oneOfType([number, string]),\n  onNext: func,\n  onFinish: func\n};\nTicker.defaultProps = {\n  offset: 0,\n  speed: 5,\n  direction: 'toLeft',\n  mode: 'chain',\n  move: true,\n  height: undefined,\n  onNext: function onNext() {},\n  onFinish: function onFinish() {}\n};\nexport default Ticker;","map":null,"metadata":{},"sourceType":"module"}